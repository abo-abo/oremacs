#!/usr/bin/python
"""
Usage: git-grep REGEX BASE-DIR DIRS...

Grep for REGEX in BASE-DIR, printing the matches relative to BASE-DIR.
Additionally grep in DIRS, also printing the matches relative to BASE-DIR.

Example for this repo:

etc/git-grep '\(prin\).*\(git\)' `pwd` git/*
"""

#* Imports
import os
import sys
import re
from elisp import *

# print sys.argv[1:]; exit (0)

#* Functions
def git_grep (regex):
    return "git --no-pager grep --full-name -n --no-color -i -I -e " + regex

def git_p (f):
    if file_directory_p (f):
        return file_exists_p (expand_file_name (".git", f))

def print_git (cmd, d = ''):
    try:
        res = shell_command_to_string (cmd)[:-1]
        for match in res.split ("\n"):
            print d + match
    except:
        pass

def git_files_in (d):
    r = [expand_file_name (f, d) for f in directory_files (d)]
    return filter (git_p, r)

def expand_globs (dirs_and_globs):
    dirs = []
    for glob in dirs_and_globs:
        m = re.match ("(.*)/\*$", glob)
        if m:
            for x in git_files_in (expand_file_name (m.group (1), base_dir)):
                dirs.append (abbreviate_file_name (x, base_dir))
        else:
            dirs.append (glob)
    return dirs

#* Assign args
regex = sys.argv[1]

base_dir = expand_file_name (sys.argv[2])

dirs_and_globs = sys.argv[3:]

#* Do work
os.chdir (base_dir)
cmd = git_grep (regex)
print_git (cmd)
for d in expand_globs (dirs_and_globs):
    os.chdir (expand_file_name (d, base_dir))
    print_git (cmd, d + '/')
